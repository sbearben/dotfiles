#!/usr/bin/env bash
#
# Generic utils that have no domain-specific knowledge, can be used anywhere.

# Function that could be used for an error trap handler
function die() {
  echo "ERROR $? IN ${BASH_SOURCE[0]} AT LINE ${BASH_LINENO[0]}" 1>&2
  log_stack
  exit 1
}

# Logs a stack dump
function log_stack() {
  local i=0
  local FRAMES=${#BASH_LINENO[@]}
  # FRAMES-2 skips main, the last one in arrays
  for ((i=FRAMES-2; i>=0; i--)); do
    echo "  File \"${BASH_SOURCE[i+1]}\", line ${BASH_LINENO[i]}, in ${FUNCNAME[i+1]}"
    # Grab the source code of the line
    #sed -n "${BASH_LINENO[i]}{s/^/    /;p}" "${BASH_SOURCE[i+1]}"
  done
  return 0
}

# Header logging
function e_header() {
  printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# Success logging
function e_success() {
  printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Error logging
function e_error() {
  printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# Warning logging
function e_warning() {
  printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
function seek_confirmation() {
  printf "\n"
  e_warning "$@"
  read -rp "Continue? (y/n) " -n 1
  printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
function is_confirmed() {
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    return 0
  fi
  return 1
}

# Test whether we're in a git repo
function is_git_repo() {
  git rev-parse --is-inside-work-tree &> /dev/null
}

# Test whether a command exists
# $1 - cmd to test
function type_exists() {
  if [ "$(type -P "$1")" ]; then
    return 0
  fi
  return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
function formula_exists() {
  if brew list "$1" >/dev/null; then
    printf "%s already installed.\n" "$1"
    return 0
  fi

  e_warning "Missing formula: $1"
  return 1
}

#######################################
# Given two json files, performs a deep merge.
# - Currently, this has a potential side-effect of
#   sorting the values of any arrays.
# Arguments:
#   First json file to merge, a path (required).
#   Second json file to merge, a path (required).
# Outputs:
#   Merged json object to stdout.
#######################################
function merge_json() {
  local json_file1="$1"
  local json_file2="$2"

  # From: https://stackoverflow.com/a/68362041/7648952
  # The following will properly deepmerge, however it does cause a side-effect
  # of sorting arrays alphabetically, so if you have an array in settings that
  # is order dependent, then this may break it.
  jq -s 'def deepmerge(a;b):
    reduce b[] as $item (a;
      reduce ($item | keys_unsorted[]) as $key (.;
        $item[$key] as $val | ($val | type) as $type | .[$key] = if ($type == "object") then
          deepmerge({}; [if .[$key] == null then {} else .[$key] end, $val])
        elif ($type == "array") then
          (.[$key] + $val | unique)
        else
          $val
        end)
      );
    deepmerge({}; .)' "$json_file1" "$json_file2"

  # Native functionality in jq
  # jq -s '.[0] * .[1]' "$json_file1" "$json_file2"
}

#######################################
# Performs a diff of the given files, with better formatting.
# - From: https://stackoverflow.com/a/33269762/7648952
# Arguments:
#   Source file, a path.
#   Target file, a path.
# Outputs:
#   Diff to stdout.
#######################################
function pretty_diff() {
  local REG
  REG=$(tput op)
  local GRP
  GRP=$(tput setaf 6)
  local ADD
  ADD=$(tput setaf 2)
  local REM
  REM=$(tput setaf 1)

  local NL=$'\n'
  local GRP_LABEL="${GRP}@@ %df,%dn +%dF,%dN @@${REG}"

  local UNCH_GRP_FMT=''

  [[ "${1}" == '@full' ]] && {
    UNCH_GRP_FMT="${GRP_LABEL}${NL}%="
    shift
  }

  diff -N \
      --new-line-format="${ADD}+%L${REG}" \
      --old-line-format="${REM}-%L${REG}" \
      --unchanged-line-format=" %L${REG}" \
      --new-group-format="${GRP_LABEL}${NL}%>" \
      --old-group-format="${GRP_LABEL}${NL}%<" \
      --changed-group-format="${GRP_LABEL}${NL}%<%>" \
      --unchanged-group-format="${UNCH_GRP_FMT}" \
      "${@}"
}

#######################################
# Strip single-line comments from a file.
# - Currently only strips single-line comments with format '//'
# Arguments:
#   File to strip single-line comments, a path.
# Outputs:
#   Stripped file to stdout.
#######################################
function strip_comments() {
  local filename=$1
  sed -e '\|//.*|d' "$filename"
}
