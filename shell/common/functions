#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_" || exit;
}

# Create a data URL from a file
function dataurl() {
	local mimeType
	mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# Pretty-print JSON files
function json() {
  [ -n "$1" ] || return
  < "$1" jq .
}

# Used to get desired bat theme at runtime (since OS theme is dynamic)
# - used in shprofile, aliases
function get_bat_theme() {
  defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo "Visual Studio Dark+" || echo "GitHub"
}

# Use bat to show git diff
function batdiff() {
    git diff --name-only --relative --diff-filter=d | xargs bat --diff --theme="$(get_bat_theme)"
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Print the bundleid for the given app
function bundleid() {
	if [ $# -eq 0 ]; then
		echo "bundleid requires an argument for app name" && return 1
	fi
  /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier /Applications/"$1".app/Contents/Info.plist
}

# Base64 encode the provided string
function e64() {
  if [ $# -eq 0 ]; then
		echo "b64e requires an argument for the string to encode" && return 1
	fi
  echo -n "$1" | base64
}

# Decode the provided base64 encoded string
function d64() {
  if [ $# -eq 0 ]; then
		echo "b64d requires an argument for the string to decode" && return 1
	fi
  echo -n "$1" | base64 -d ; echo
}


##################################################
# Android/adb hepers                             #
##################################################

function adb_snap() {
  if [ $# -eq 0 ]
  then
    name="adb_screenshot.png"
  else
    name="$1.png"
  fi
  adb shell screencap -p /sdcard/"$name"
  adb pull /sdcard/"$name"
  adb shell rm /sdcard/"$name"
  echo "save to $(pwd)/$name"
}

function adb_record() {
  if [ $# -eq 0 ]
  then
    name="adb_recording.mp4"
  else
    name="$1.mp4"
  fi
  echo "Starting recording, press CTRL+C when you're done..."
  trap "echo 'Recording stopped, downloading output...'" INT
  adb shell screenrecord /sdcard/"$name"
  trap - INT
  sleep 5
  adb pull /sdcard/"$name"
  sleep 1
  adb shell rm /sdcard/"$name"
}

# Remove package/app for current user
function adb_remove_user_app() {
  local package_name=$1
  adb shell pm uninstall --user 0 "$package_name"
}


##################################################
# Process/ports/other                            #
##################################################

function find_process_on_port() {
  local port=$1
  lsof -i tcp:"$port"
}

function kill_process() {
  local pid=$1
  kill -9 "$pid"
}
