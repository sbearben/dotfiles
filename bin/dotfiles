#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091

set -e

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_BRANCH=${GITHUB_REF_NAME:-"main"}
DOTFILES_TARBALL_PATH="https://github.com/sbearben/dotfiles/tarball/$DOTFILES_TARBALL_BRANCH"
DOTFILES_GIT_REMOTE="https://github.com/sbearben/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
  printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
  mkdir "${DOTFILES_DIRECTORY}"
  # Get the tarball
  curl -fsSLo "${HOME}"/dotfiles.tar.gz "${DOTFILES_TARBALL_PATH}"
  # Extract to the dotfiles directory
  tar -zxf "${HOME}"/dotfiles.tar.gz --strip-components 1 -C "${DOTFILES_DIRECTORY}"
  # Remove the tarball
  rm -rf "${HOME}"/dotfiles.tar.gz
fi

cd "${DOTFILES_DIRECTORY}" || exit

source ./dotfiles_env
source ./lib/help
source ./lib/utils
source ./brew/brew
source ./lib/extensions
source ./macos/applications.sh
source ./vscode/setup.sh

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  run_help
  exit
fi

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
  e_error "The XCode Command Line Tools must be installed first."
  printf " Download them from: https://developer.apple.com/downloads\n"
  printf " Then run: bash ~/.dotfiles/bin/dotfiles\n"
  exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
  # Brew installation will look for .bash_profile after being installed - create it if it doesn't exist (will be overwritten later)
  touch -a "${HOME}/.bash_profile"
  e_header "Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Check for git
if ! type_exists 'git'; then
  e_header "Updating Homebrew..."
  brew update
  e_header "Installing Git..."
  brew install git
fi

# Check bash version, install updated version from brew if needed
if [[ $(bash -c 'echo ${BASH_VERSINFO[0]}') -lt 5 ]]; then
  e_header "Updating Homebrew..."
  brew update
  e_header "Installing newer version of bash..."
  brew install bash
  e_success "Installed updated version of bash."
  e_header "Changing default shell to bash v5..."
  if ! grep -qF "${HOMEBREW_PREFIX}"/bin/bash "/etc/shells"; then
    echo "${HOMEBREW_PREFIX}"/bin/bash | sudo tee -a /etc/shells
  fi
  
  sudo chsh -s "${HOMEBREW_PREFIX}"/bin/bash
  e_success "Default shell is now bash v5."
  if [[ "$CI" == false ]]; then
    printf "Dotfile setup must be re-run with: bash ~/.dotfiles/bin/dotfiles\n"
    exit 1
  fi
fi

# Initialize the git repository if it's missing
if ! is_git_repo && [[ "$CI" == false ]]; then
  e_header "Initializing git repository..."
  git init
  git remote add origin ${DOTFILES_GIT_REMOTE}
  git fetch origin main
  # Reset the index and working tree to the fetched HEAD
  git reset --hard FETCH_HEAD
  # Remove any untracked files
  git clean -fd
fi

function sync_dotfiles() {
  e_header "Syncing dotfiles..."
  # Pull down the latest changes
  git pull --rebase origin main
}

function install_brew_packages() {
  printf "Updating packages...\n"
  # Install Homebrew formulae
  run_brew
}

function install_macos_apps() {
  e_header "Installing macOS desktop apps"
  # Install macOS apps via cask
  install_applications
  # Post-installation, install vscode extensions
  e_header "Installing vscode extensions"
  install_vscode_extensions
  e_success "Done"
}

function download_extensions() {
  download_extensions_repo "$1" "$DOTFILES_EXT_DIRECTORY"
  # Source `dotfiles_env` again since some env variables are conditional on existence of extension files
  source ./dotfiles_env
}

function link() {
  # Force create/replace the symlink.
  ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

# symlink/copy dotfiles and vscode settings
function link_dotfiles() {
  # Ask before potentially overwritting files
  seek_confirmation "Warning: This step may overwrite your existing dotfiles."

  if is_confirmed; then
    # Copy '.gitconfig' - the gitconfig file will extend the `gituser` file if 
    # available, or any gitconfig extension. This is loaded in `bash_ext_init`.
    cp "${DOTFILES_DIRECTORY}/git/gitconfig" "${HOME}/.gitconfig"
    link "shell/bashrc"          ".bashrc"
    link "shell/bash_profile"    ".bash_profile"
    link "shell/bash_completion" ".bash_completion"
    link "vim/vimrc"             ".vimrc"
    link "hammerspoon"           ".hammerspoon"
    e_success "Dotfiles update complete!"
    source "${HOME}/.bashrc"
  else
    printf "Skipped symlinking dotfiles to root.\n"
  fi

  # Install vscode settings.json
  ./vscode/settings_actions.sh install
}

function run_macos_action() {
  local action="$1"
  case $action in
    install-apps) install_macos_apps ;;
    apply-defaults) ./macos/macosdefaults ;;
    configure-dock) ./macos/dock.sh ;;
    *)
      e_error "Error: invalid macos action $1"
      exit 1
      ;;
  esac
}

function run_vscode_action() {
  local action="$1"
  case $action in
    settings-*)
      # Extract string from $action after the right-most '-'
      local vscode_action=${action##*-} 
      ./vscode/settings_actions.sh "$vscode_action"
      ;;
    *)
      e_error "Error: invalid vscode action $1"
      exit 1
      ;;
  esac
}

function run_dotfiles() {
  # Initialize arguments
  local no_sync=false
  local install_packages=false
  local install_apps=false
  local extensions_repo_remote

  # Extract provided arguments.
  # Performing no validation of provided arguments.
  while (( "$#" )); do
    case $1 in
      --no-sync) no_sync=true ;;
      --install-packages) install_packages=true ;;
      --install-apps) install_apps=true ;;
      --extensions-remote)
        if [ "$2" ]; then
          extensions_repo_remote=$2
          shift
        else
          e_error 'Option "--extensions-remote" requires a non-empty argument.'
          exit 1
        fi
        ;;
      --*|-*)
        e_error "Error: invalid option $1"
        exit 1
        ;;
    esac
    shift
  done

  # Conditionally sync with the remote repository
  if [[ "$no_sync" == true ]]; then
    printf "Skipped dotfiles sync.\n"
  else
    sync_dotfiles
  fi

  # Initializes and sets up provided extensions repo
  if [[ $extensions_repo_remote ]]; then
    download_extensions "$extensions_repo_remote"
  else
    printf "Skipped initializing extensions repo.\n"
  fi

  # First insall applications if desired
  if [[ "$install_apps" == true ]]; then
    install_macos_apps
  else
    printf "Skipped installing applications.\n"
  fi

  # Install and update packages
  if [[ "$install_packages" == true ]]; then
    install_brew_packages
  else
    printf "Skipped package installations.\n"
  fi

  link_dotfiles

  # Ask before potentially overwritting macOS defaults
  seek_confirmation "Warning: This step may modify your macOS system defaults."
  if is_confirmed; then
    bash ./macos/macosdefaults
    e_success "macOS settings updated! You may need to restart."
  else
    printf "Skipped macOS settings update.\n"
  fi
}

case $1 in
  install-all)
    shift
    run_dotfiles --install-packages --install-apps "$@"
    ;;
  install) 
    shift
    run_dotfiles "$@"
    ;;
  update)
    sync_dotfiles
    install_brew_packages
    link_dotfiles
    ;;
  download-extensions) download_extensions "$2" ;;
  mirror) link_dotfiles ;;
  macos) run_macos_action "$2" ;;
  vscode) run_vscode_action "$2" ;;
  *)
    e_error "Error: invalid dotfiles action $1"
    exit 1
    ;;
esac
